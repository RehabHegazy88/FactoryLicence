@page
@model PdfExtractorRazor.Pages.IndexModel
@{
    ViewData["Title"] = "Calibration Certificate Extractor";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }

        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 15px;
            font-size: 2.5em;
        }

        .lead {
            text-align: center;
            color: #666;
            font-size: 1.2em;
            margin-bottom: 40px;
        }

        .card {
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            margin-bottom: 30px;
            border: none;
            overflow: hidden;
            transition: transform 0.3s ease;
        }

            .card:hover {
                transform: translateY(-5px);
                box-shadow: 0 15px 35px rgba(0,0,0,0.15);
            }

        .card-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border: none;
            font-size: 1.2em;
            font-weight: bold;
        }

            .card-header.success {
                background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            }

            .card-header.info {
                background: linear-gradient(135deg, #17a2b8 0%, #007bff 100%);
            }

            .card-header.secondary {
                background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
            }

        .card-body {
            padding: 25px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 10px;
            font-weight: bold;
            color: #333;
            font-size: 1.1em;
        }

        input[type="file"] {
            width: 100%;
            padding: 15px;
            border: 2px solid #ddd;
            border-radius: 10px;
            background: white;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }

            input[type="file"]:focus {
                outline: none;
                border-color: #667eea;
                box-shadow: 0 0 10px rgba(102, 126, 234, 0.2);
            }

        .form-text {
            color: #666;
            font-size: 14px;
            margin-top: 8px;
        }

        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
            transition: transform 0.2s;
            text-decoration: none;
            display: inline-block;
        }

            .btn:hover {
                transform: scale(1.05);
                box-shadow: 0 5px 15px rgba(0,0,0,0.2);
                color: white;
            }

        .btn-light {
            background: white;
            color: #333;
            border: 2px solid #ddd;
        }

            .btn-light:hover {
                background: #f8f9fa;
                color: #333;
            }

        .btn-success {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        }

        .btn-outline-secondary {
            background: transparent;
            color: #6c757d;
            border: 2px solid #6c757d;
        }

            .btn-outline-secondary:hover {
                background: #6c757d;
                color: white;
            }

        .stats-row {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            text-align: center;
            margin-bottom: 20px;
        }

        .stat-item {
            padding: 15px;
            border-radius: 10px;
            background: linear-gradient(135deg, #f8f9ff 0%, #f0f2ff 100%);
        }

        .stat-number {
            font-size: 2em;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 5px;
        }

        .stat-label {
            color: #666;
            font-size: 0.9em;
        }

        .errors-section {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            border-radius: 10px;
            padding: 15px;
            margin-top: 20px;
        }

        .error-item {
            color: #721c24;
            margin-bottom: 5px;
            font-size: 14px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background: linear-gradient(135deg, #333 0%, #555 100%);
            color: white;
            font-weight: bold;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        tr:hover {
            background-color: #f0f0f0;
        }

        .table-container {
            max-height: 500px;
            overflow-y: auto;
            border-radius: 10px;
            border: 1px solid #ddd;
        }

        .badge {
            padding: 6px 12px;
            border-radius: 15px;
            font-size: 12px;
            font-weight: bold;
        }

        .badge-success {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
        }

        .badge-danger {
            background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
            color: white;
        }

        .json-output {
            background: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 10px;
            padding: 20px;
            max-height: 400px;
            overflow-y: auto;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.5;
            white-space: pre-wrap;
        }

        .text-danger {
            color: #dc3545;
        }

        .icon {
            margin-right: 8px;
        }

        .row {
            display: grid;
            gap: 30px;
            margin-bottom: 30px;
        }

        .two-columns {
            grid-template-columns: 1fr 1fr;
        }

        .card-header-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .processing-indicator {
            text-align: center;
            padding: 20px;
            color: #667eea;
            font-size: 16px;
            display: none;
        }

            .processing-indicator.show {
                display: block;
            }

        @@media (max-width: 768px) {
            .container

        {
            margin: 10px;
            padding: 20px;
        }

        .two-columns {
            grid-template-columns: 1fr;
        }

        .stats-row {
            grid-template-columns: 1fr;
            gap: 10px;
        }

        h1 {
            font-size: 2em;
        }

        table {
            font-size: 12px;
        }

        th, td {
            padding: 8px;
        }

        }

        @@keyframes spin {
            0%

        {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }

        }

        .spinner {
            display: inline-block;
            animation: spin 1s linear infinite;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🏭 Calibration Certificate Data Extractor</h1>
        <p class="lead">Upload PDF calibration certificates to extract structured data in JSON format.</p>

        <div class="row two-columns">
            <div class="card">
                <div class="card-header">
                    <span class="icon">📁</span>Upload PDF Files
                </div>
                <div class="card-body">
                    <form method="post" enctype="multipart/form-data" id="uploadForm">
                        <div class="form-group">
                            <label for="UploadedFiles">Select PDF Files</label>
                            <input asp-for="UploadedFiles" type="file" class="form-control"
                                   accept=".pdf" multiple required>
                            <span asp-validation-for="UploadedFiles" class="text-danger"></span>
                            <div class="form-text">
                                Select one or more PDF calibration certificate files to process.
                            </div>
                        </div>

                        <button type="submit" class="btn" id="extractBtn">
                            <span class="icon">⚙️</span>Extract Data
                        </button>
                    </form>

                    <div class="processing-indicator" id="processing">
                        <div class="spinner">⏳</div>
                        Processing your PDF files, please wait...
                    </div>
                </div>
            </div>

            @if (Model.ExtractionResult != null)
            {
                <div class="card">
                    <div class="card-header success">
                        <span class="icon">📊</span>Processing Summary
                    </div>
                    <div class="card-body">
                        <div class="stats-row">
                            <div class="stat-item">
                                <div class="stat-number">@Model.ExtractionResult.ProcessedFiles</div>
                                <div class="stat-label">Files Processed</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-number" style="color: #28a745;">@Model.ExtractionResult.Certificates.Count</div>
                                <div class="stat-label">Certificates Extracted</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-number" style="color: #dc3545;">@Model.ExtractionResult.Errors.Count</div>
                                <div class="stat-label">Errors</div>
                            </div>
                        </div>

                        @if (Model.ExtractionResult.Errors.Any())
                        {
                            <div class="errors-section">
                                <h6 style="color: #721c24; margin-bottom: 10px;">⚠️ Errors:</h6>
                                @foreach (var error in Model.ExtractionResult.Errors)
                                {
                                    <div class="error-item">• @error</div>
                                }
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        @if (Model.ExtractionResult?.HasResults == true)
        {
            <div class="card">
                <div class="card-header info">
                    <div class="card-header-actions">
                        <span><span class="icon">📋</span>Extracted Certificates</span>
                        <form method="post" asp-page-handler="DownloadJson" style="display: inline;">
                            <input type="hidden" name="jsonData" value="@Model.ExtractionResult.JsonOutput" />
                            <button type="submit" class="btn btn-light">
                                <span class="icon">💾</span>Download JSON
                            </button>
                        </form>
                    </div>
                </div>
                <div class="card-body" style="padding: 0;">
                    <div class="table-container">
                        <table>
                            <thead>
                                <tr>
                                    <th>Certificate No</th>
                                    <th>Equipment Type</th>
                                    <th>Manufacturer</th>
                                    <th>Serial No</th>
                                    <th>Range</th>
                                    <th>Location</th>
                                    <th>Status</th>
                                    <th>Cal Date</th>
                                    <th>Next Cal</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var cert in Model.ExtractionResult.Certificates)
                                {
                                    <tr>
                                        <td style="font-weight: bold;">@cert.CertificateNo</td>
                                        <td>@cert.EquipmentType</td>
                                        <td>@cert.Manufacturer</td>
                                        <td>@cert.SerialNo</td>
                                        <td>@cert.Range @cert.Units</td>
                                        <td style="font-size: 0.9em;">@cert.Location</td>
                                        <td>
                                            <span class="badge @(cert.Status == "PASS" ? "badge-success" : "badge-danger")">
                                                @cert.Status
                                            </span>
                                        </td>
                                        <td>@cert.CalibrationDate</td>
                                        <td>@cert.NextCalDate</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-header secondary">
                    <span class="icon">💻</span>JSON Output
                </div>
                <div class="card-body">
                    <div class="json-output">@Model.ExtractionResult.JsonOutput</div>
                    <button class="btn btn-outline-secondary" onclick="copyToClipboard()" style="margin-top: 15px;">
                        <span class="icon">📋</span>Copy to Clipboard
                    </button>
                </div>
            </div>

            <div style="text-align: center; margin-top: 20px; color: #666;">
                <small>
                    Data extraction completed at @DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")
                </small>
            </div>
        }
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('uploadForm');
            const extractBtn = document.getElementById('extractBtn');
            const processing = document.getElementById('processing');

            // Handle form submission
            form.addEventListener('submit', function() {
                extractBtn.disabled = true;
                extractBtn.innerHTML = '<span class="spinner">⏳</span>Processing...';
                processing.classList.add('show');
            });

            // File input enhancement
            const fileInput = document.querySelector('input[type="file"]');
            if (fileInput) {
                fileInput.addEventListener('change', function() {
                    const fileCount = this.files.length;
                    const formText = document.querySelector('.form-text');
                    if (fileCount > 0) {
                        formText.textContent = `${fileCount} file(s) selected for processing.`;
                        formText.style.color = '#667eea';
                        formText.style.fontWeight = 'bold';
                    }
                });
            }
        });

        function copyToClipboard() {
            const jsonText = document.querySelector('.json-output').textContent;
            navigator.clipboard.writeText(jsonText).then(function() {
                // Show success message
                const btn = document.querySelector('button[onclick="copyToClipboard()"]');
                const originalText = btn.innerHTML;
                btn.innerHTML = '<span class="icon">✅</span>Copied!';
                btn.classList.remove('btn-outline-secondary');
                btn.classList.add('btn-success');

                setTimeout(function() {
                    btn.innerHTML = originalText;
                    btn.classList.remove('btn-success');
                    btn.classList.add('btn-outline-secondary');
                }, 2000);
            });
        }
    </script>

    @section Scripts {
        <partial name="_ValidationScriptsPartial" />
    }
</body>
</html>