@page
@model PdfExtractorRazor.Pages.UploadPdfModel
@{
    ViewData["Title"] = "Upload PDF";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }

        h1, h2 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5em;
        }

        h3 {
            color: #333;
            margin-top: 30px;
            margin-bottom: 15px;
            font-size: 1.8em;
        }

        .upload-section {
            background: linear-gradient(135deg, #f8f9ff 0%, #f0f2ff 100%);
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            border: 2px dashed #667eea;
            text-align: center;
            transition: all 0.3s ease;
        }

            .upload-section:hover {
                border-color: #764ba2;
                transform: translateY(-2px);
                box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 10px;
            font-weight: bold;
            color: #333;
            font-size: 1.1em;
        }

        input[type="file"] {
            width: 100%;
            padding: 15px;
            border: 2px solid #ddd;
            border-radius: 10px;
            background: white;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }

            input[type="file"]:focus {
                outline: none;
                border-color: #667eea;
                box-shadow: 0 0 10px rgba(102, 126, 234, 0.2);
            }

        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 15px 40px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 18px;
            font-weight: bold;
            transition: transform 0.2s;
            text-decoration: none;
            display: inline-block;
            margin-top: 15px;
        }

            .btn:hover {
                transform: scale(1.05);
                box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            }

            .btn:disabled {
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
            }

        .alert {
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            font-size: 16px;
        }

        .alert-error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .text-danger {
            color: #dc3545;
            font-size: 14px;
            margin-top: 5px;
            display: block;
        }

        .extracted-text-section {
            background: linear-gradient(135deg, #f8f9ff 0%, #f0f2ff 100%);
            padding: 25px;
            border-radius: 15px;
            margin-top: 30px;
            border-left: 5px solid #667eea;
        }

        .extracted-text {
            background: white;
            border: 1px solid #ddd;
            border-radius: 10px;
            padding: 20px;
            white-space: pre-wrap;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.5;
            max-height: 500px;
            overflow-y: auto;
            color: #333;
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
        }

        .upload-icon {
            font-size: 3em;
            color: #667eea;
            margin-bottom: 15px;
            display: block;
        }

        .upload-instructions {
            color: #666;
            margin-top: 10px;
            font-size: 14px;
        }

        .processing {
            text-align: center;
            padding: 20px;
            color: #667eea;
            font-size: 16px;
            display: none;
        }

            .processing.show {
                display: block;
            }

        @@media print {
            body

        {
            background: white;
            margin: 0;
        }

        .container {
            box-shadow: none;
            padding: 10px;
        }

        .upload-section, .btn {
            display: none !important;
        }

        }

        @@media (max-width: 768px) {
            .container

        {
            margin: 10px;
            padding: 20px;
        }

        h1, h2 {
            font-size: 2em;
        }

        .upload-section {
            padding: 20px;
        }

        }
    </style>
</head>
<body>
    <div class="container">
        <h1>📄 PDF Text Extractor</h1>

        @if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
        {
            <div class="alert alert-error">
                <strong>Error:</strong> @Model.ErrorMessage
            </div>
        }

        <div class="upload-section">
            <span class="upload-icon">📁</span>
            <h2>Upload a PDF to extract text</h2>

            <form method="post" enctype="multipart/form-data" id="uploadForm">
                <div class="form-group">
                    <label asp-for="Pdf">Choose PDF File</label>
                    <input asp-for="Pdf" type="file" accept="application/pdf,.pdf" />
                    <span asp-validation-for="Pdf" class="text-danger"></span>
                    <div class="upload-instructions">
                        Select a PDF file to extract its text content for processing
                    </div>
                </div>

                <button type="submit" class="btn" id="submitBtn">
                    🚀 Extract Text
                </button>
            </form>

            <div class="processing" id="processing">
                <div style="display: inline-block; animation: spin 1s linear infinite;">⏳</div>
                Processing your PDF file, please wait...
            </div>
        </div>

        @if (!string.IsNullOrWhiteSpace(Model.ExtractedText))
        {
            <div class="extracted-text-section">
                <h3>📋 Extracted Text Content</h3>
                <div class="extracted-text">@Model.ExtractedText</div>

                <div style="text-align: center; margin-top: 20px;">
                    <button onclick="copyToClipboard()" class="btn" style="margin-right: 10px;">
                        📋 Copy Text
                    </button>
                    <button onclick="downloadText()" class="btn">
                        💾 Download as TXT
                    </button>
                </div>
            </div>
        }

        @if (!string.IsNullOrWhiteSpace(Model.ExtractedText))
        {
            <div style="margin-top: 20px; text-align: center; color: #666;">
                <small>
                    Text extraction completed at @DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")
                </small>
            </div>
        }
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('uploadForm');
            const submitBtn = document.getElementById('submitBtn');
            const processing = document.getElementById('processing');

            // Handle form submission
            form.addEventListener('submit', function() {
                submitBtn.disabled = true;
                submitBtn.textContent = 'Processing...';
                processing.classList.add('show');
            });

            // Auto-hide alerts after 5 seconds
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                setTimeout(() => {
                    alert.style.opacity = '0';
                    setTimeout(() => {
                        if (alert.parentNode) {
                            alert.parentNode.removeChild(alert);
                        }
                    }, 300);
                }, 5000);
            });

            // File input enhancement
            const fileInput = document.querySelector('input[type="file"]');
            if (fileInput) {
                fileInput.addEventListener('change', function() {
                    const fileName = this.files[0]?.name;
                    if (fileName) {
                        const instructions = document.querySelector('.upload-instructions');
                        instructions.textContent = `Selected: ${fileName}`;
                        instructions.style.color = '#667eea';
                        instructions.style.fontWeight = 'bold';
                    }
                });
            }
        });

        // Copy extracted text to clipboard
        function copyToClipboard() {
            const textContent = document.querySelector('.extracted-text').textContent;
            navigator.clipboard.writeText(textContent).then(function() {
                // Show temporary success message
                const btn = event.target;
                const originalText = btn.textContent;
                btn.textContent = '✅ Copied!';
                btn.style.background = 'linear-gradient(135deg, #28a745 0%, #20c997 100%)';

                setTimeout(() => {
                    btn.textContent = originalText;
                    btn.style.background = 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';
                }, 2000);
            });
        }

        // Download extracted text as file
        function downloadText() {
            const textContent = document.querySelector('.extracted-text').textContent;
            const blob = new Blob([textContent], { type: 'text/plain' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `extracted-text-${new Date().getTime()}.txt`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        }

        // Add spinning animation
        const style = document.createElement('style');
        style.textContent = `
        @@keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        `;
        document.head.appendChild(style);
    </script>

    @section Scripts {
        <partial name="_ValidationScriptsPartial" />
    }
</body>
</html>